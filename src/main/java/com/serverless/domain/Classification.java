package com.serverless.domain;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.serverless.commons.DynamoDBAdapter;
import org.apache.log4j.Logger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "CLASSIFICATIONS_TABLE_NAME")
public class Classification {
    private static final String TABLE_NAME = System.getenv("CLASSIFICATIONS_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;


    private Logger logger = Logger.getLogger(this.getClass());

    private String id;
    private String result;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "result")
    public String getResult() {
        return this.result;
    }

    public void setResult(String result) {
        this.result = result;
    }


    public Classification() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TABLE_NAME))
                .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Clasification [id=%s, result=%s]", this.id, this.result);
    }

    public Boolean ifTableExists() {
        return this.client.describeTable(TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Classification> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Classification> results = this.mapper.scan(Classification.class, scanExp);
        for (Classification p : results) {
            logger.info("Classification - list(): " + p.toString());
        }
        return results;
    }

    public Classification get(String id) throws IOException {
        Classification classification = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Classification> queryExp = new DynamoDBQueryExpression<Classification>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Classification> result = this.mapper.query(Classification.class, queryExp);
        if (!result.isEmpty()) {
            classification = result.get(0);
            logger.info("Classifications - get(): Classification - " + classification.toString());
        } else {
            logger.info("Classifications - get(): Classification - Not Found.");
        }
        return classification;
    }

    public void save(Classification classification) throws IOException {
        logger.info("Classification - save(): " + classification.toString());
        this.mapper.save(classification);
    }

}
