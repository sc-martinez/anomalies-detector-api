package com.serverless.domain;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.serverless.commons.DynamoDBAdapter;
import org.apache.log4j.Logger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

/**
 * Represents a DynamoDB table for storing classifications.
 */
@DynamoDBTable(tableName = "CLASSIFICATIONS_TABLE_NAME")
public class Classification {
    /** The name of the DynamoDB table storing classifications. */
    private static final String TABLE_NAME = System.getenv("CLASSIFICATIONS_TABLE_NAME");

    /** The DynamoDB adapter instance. */
    private static DynamoDBAdapter db_adapter;

    /** The AmazonDynamoDB client for interacting with DynamoDB. */
    private final AmazonDynamoDB client;

    /** The DynamoDBMapper for mapping objects to the database. */
    private final DynamoDBMapper mapper;

    /** The logger instance for logging messages. */
    private Logger logger = Logger.getLogger(this.getClass());

    /** The unique identifier for a classification. */
    private String id;

    /** The result of the classification. */
    private String result;

    /**
     * Retrieves the ID of the classification.
     *
     * @return The ID of the classification.
     */
    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }

    /**
     * Sets the ID of the classification.
     *
     * @param id The ID to set for the classification.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Retrieves the result of the classification.
     *
     * @return The result of the classification.
     */
    @DynamoDBRangeKey(attributeName = "result")
    public String getResult() {
        return this.result;
    }

    /**
     * Sets the result of the classification.
     *
     * @param result The result to set for the classification.
     */
    public void setResult(String result) {
        this.result = result;
    }

    /**
     * Constructor for the Classification class.
     * Initializes the DynamoDBMapper and AmazonDynamoDB client using the DynamoDBAdapter.
     */
    public Classification() {
        // Build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TABLE_NAME))
                .build();
        // Get the DynamoDB adapter instance
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // Create the mapper with the configuration
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    /**
     * Returns a string representation of the Classification object.
     *
     * @return A string representing the Classification object.
     */
    public String toString() {
        return String.format("Classification [id=%s, result=%s]", this.id, this.result);
    }

    /**
     * Checks if the DynamoDB table exists.
     *
     * @return true if the table exists and is active; otherwise, false.
     */
    public Boolean ifTableExists() {
        return this.client.describeTable(TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    /**
     * Retrieves a list of Classification objects from the DynamoDB table.
     *
     * @return A list of Classification objects.
     * @throws IOException If an I/O error occurs.
     */
    public List<Classification> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Classification> results = this.mapper.scan(Classification.class, scanExp);
        for (Classification p : results) {
            logger.info("Classification - list(): " + p.toString());
        }
        return results;
    }

    /**
     * Retrieves a Classification object by its ID from the DynamoDB table.
     *
     * @param id The ID of the Classification to retrieve.
     * @return The Classification object corresponding to the given ID.
     * @throws IOException If an I/O error occurs.
     */
    public Classification get(String id) throws IOException {
        Classification classification = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Classification> queryExp = new DynamoDBQueryExpression<Classification>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Classification> result = this.mapper.query(Classification.class, queryExp);
        if (!result.isEmpty()) {
            classification = result.get(0);
            logger.info("Classifications - get(): Classification - " + classification.toString());
        } else {
            logger.info("Classifications - get(): Classification - Not Found.");
        }
        return classification;
    }

    /**
     * Saves a Classification object to the DynamoDB table.
     *
     * @param classification The Classification object to save.
     * @throws IOException If an I/O error occurs.
     */
    public void save(Classification classification) throws IOException {
        logger.info("Classification - save(): " + classification.toString());
        this.mapper.save(classification);
    }
}
